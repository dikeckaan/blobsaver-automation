name: BlobSaver Backup (Multi-Device XML Parse)

on:
  workflow_dispatch:

jobs:
  backup-blobs:
    runs-on: ubuntu-latest

    steps:
      - name: Gerekli bağımlılıkları yükle
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils curl jq

      - name: Checkout
        uses: actions/checkout@v4

      - name: BlobSaver indir ve çıkar
        run: |
          curl -L -o blobsaver.tgz https://github.com/airsquared/blobsaver/releases/download/v3.6.0/blobsaver-3.6.0.tgz
          mkdir extract
          tar -xzf blobsaver.tgz -C extract
          chmod +x extract/blobsaver/bin/blobsaver

      - name: blobsaver.xml oluştur
        run: echo '${{ secrets.BLOBSAVER }}' > blobsaver.xml

      - name: XML'den cihazları işle ve blobları al
        run: |
          mkdir -p ./shsh

          device_names=$(xmllint --xpath "//node[@name='Saved Devices']/node/@name" blobsaver.xml | sed -E 's/name="([^"]*)"/\1\n/g' | grep -v '^$')

          for name in $device_names; do
            ecid=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='ECID']/@value)" blobsaver.xml)
            identifier=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Device Identifier']/@value)" blobsaver.xml)
            apnonce=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Apnonce']/@value)" blobsaver.xml)
            generator=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Generator']/@value)" blobsaver.xml)
            betas=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Include Betas']/@value)" blobsaver.xml)

            cmd=(extract/blobsaver/bin/blobsaver --save-blobs \
              --identifier="$identifier" \
              --ecid="$ecid" \
              --apnonce="$apnonce" \
              --generator="$generator" \
              --save-path=./shsh)
            if [[ "$betas" == "true" ]]; then
              cmd+=("--include-betas")
            fi
            "${cmd[@]}" >/dev/null 2>&1

            if [[ "$betas" == "true" ]]; then
              cmd="$cmd --include-betas"
            fi

            eval "$cmd" >/dev/null 2>&1
          done

            - name: SHSH dosyalarını Telegram'a gönder
              env:
                TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
                TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
              run: |
                error_occurred=false
            
                find ./shsh -type f -name "*.shsh2" | while read -r file; do
                  curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendDocument" \
                    -F chat_id="${TG_CHAT_ID}" \
                    -F document=@"$file" >/dev/null || {
                      curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
                        -F chat_id="${TG_CHAT_ID}" \
                        -F text="⚠️ Dosya gönderilemedi: $file" >/dev/null || error_occurred=true
                    }
                done
            
                if $error_occurred; then
                  curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
                    -F chat_id="${TG_CHAT_ID}" \
                    -F text="⚠️ Hata oluştu ve hata mesajı Telegram'a bile iletilemedi." >/dev/null
                fi

name: BlobSaver Backup (Multi-Device XML Parse)

on:
  schedule:
    - cron: '0 9 * * *' # Türkiye saatiyle 12:00 için UTC 09:00
  workflow_dispatch:

jobs:
  backup-blobs:
    runs-on: ubuntu-latest

    steps:
      - name: Gerekli bağımlılıkları yükle
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq libxml2-utils curl jq

      - name: Checkout
        uses: actions/checkout@v4

      - name: BlobSaver indir ve çıkar
        run: |
          curl -sSL -o blobsaver.tgz https://github.com/airsquared/blobsaver/releases/download/v3.6.0/blobsaver-3.6.0.tgz
          mkdir extract
          tar -xzf blobsaver.tgz -C extract
          chmod +x extract/blobsaver/bin/blobsaver

      - name: blobsaver.xml oluştur
        run: echo '${{ secrets.BLOBSAVER }}' > blobsaver.xml

      - name: XML'den cihazları işle ve blobları al
        run: |
          set -e
          exec > /dev/null

          mkdir -p ./shsh

          device_names=$(xmllint --xpath "//node[@name='Saved Devices']/node/@name" blobsaver.xml | sed -E 's/name="([^"]*)"/\1\n/g' | grep -v '^$')

          for name in $device_names; do
            ecid=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='ECID']/@value)" blobsaver.xml)
            identifier=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Device Identifier']/@value)" blobsaver.xml)
            apnonce=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Apnonce']/@value)" blobsaver.xml)
            generator=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Generator']/@value)" blobsaver.xml)
            betas=$(xmllint --xpath "string(//node[@name='$name']/map/entry[@key='Include Betas']/@value)" blobsaver.xml)

            cmd="extract/blobsaver/bin/blobsaver --save-blobs \
              --identifier='$identifier' \
              --ecid='$ecid' \
              --apnonce='$apnonce' \
              --generator='$generator' \
              --save-path=./shsh"

            if [[ \"$betas\" == "true" ]]; then
              cmd=\"$cmd --include-betas\"
            fi

            eval "$cmd"
          done

      - name: Hata varsa Telegram'a gönder
        if: failure()
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          ERROR_MSG="❗ BlobSaver Workflow başarısız oldu: ${GITHUB_WORKFLOW} - ${GITHUB_RUN_ID}"
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d text="$ERROR_MSG")

          if ! echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "⚠️ Hata meydana geldi, ancak Telegram mesajı iletilemedi."
          fi
